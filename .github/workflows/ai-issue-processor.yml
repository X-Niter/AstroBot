name: AI Issue Processor

on:
  issues:
    types: [opened, edited, labeled]
  issue_comment:
    types: [created, edited]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: number
      action_type:
        description: 'Type of action to perform'
        required: true
        type: choice
        options:
          - analyze
          - suggest-fix
          - implement
          - optimize

jobs:
  process-issue:
    name: Process Issue with AI
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # Determine issue to process
      - name: Set issue number
        id: set-issue
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ISSUE_NUMBER=${{ github.event.inputs.issue_number }}" >> $GITHUB_ENV
          else
            echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
          fi
      
      # Get issue details
      - name: Get issue details
        id: get-issue
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ISSUE_JSON=$(gh api repos/${{ github.repository }}/issues/${{ env.ISSUE_NUMBER }})
            echo "ISSUE_TITLE=$(echo $ISSUE_JSON | jq -r '.title')" >> $GITHUB_ENV
            echo "ISSUE_BODY=$(echo $ISSUE_JSON | jq -r '.body')" >> $GITHUB_ENV
            echo "ISSUE_LABELS=$(echo $ISSUE_JSON | jq -r '.labels[].name')" >> $GITHUB_ENV
          else
            echo "ISSUE_TITLE=${{ github.event.issue.title }}" >> $GITHUB_ENV
            echo "ISSUE_BODY=${{ github.event.issue.body }}" >> $GITHUB_ENV
            
            # Get labels as comma-separated list
            LABELS=$(gh api repos/${{ github.repository }}/issues/${{ env.ISSUE_NUMBER }} | jq -r '.labels[].name' | tr '\n' ',' | sed 's/,$//')
            echo "ISSUE_LABELS=$LABELS" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Check if this is an AI command comment
      - name: Check for AI command
        id: check-command
        if: github.event_name == 'issue_comment'
        run: |
          COMMENT="${{ github.event.comment.body }}"
          if [[ "$COMMENT" =~ "@ai "* ]]; then
            COMMAND=$(echo "$COMMENT" | grep -o '@ai [a-z\-]*' | sed 's/@ai //')
            echo "AI_COMMAND=$COMMAND" >> $GITHUB_ENV
            echo "HAS_COMMAND=true" >> $GITHUB_ENV
            
            # Extract the rest as instructions
            INSTRUCTIONS=$(echo "$COMMENT" | sed 's/@ai [a-z\-]* //')
            echo "AI_INSTRUCTIONS=$INSTRUCTIONS" >> $GITHUB_ENV
          else
            echo "HAS_COMMAND=false" >> $GITHUB_ENV
          fi
      
      # Determine action type
      - name: Set action type
        id: set-action
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ACTION_TYPE=${{ github.event.inputs.action_type }}" >> $GITHUB_ENV
          elif [ "${{ env.HAS_COMMAND }}" == "true" ]; then
            echo "ACTION_TYPE=${{ env.AI_COMMAND }}" >> $GITHUB_ENV
          else
            # Default based on issue labels
            if [[ "${{ env.ISSUE_LABELS }}" == *"bug"* ]]; then
              echo "ACTION_TYPE=suggest-fix" >> $GITHUB_ENV
            elif [[ "${{ env.ISSUE_LABELS }}" == *"enhancement"* ]]; then
              echo "ACTION_TYPE=analyze" >> $GITHUB_ENV
            else
              echo "ACTION_TYPE=analyze" >> $GITHUB_ENV
            fi
          fi
      
      # Create a unique branch for this issue
      - name: Create branch
        run: |
          BRANCH_NAME="ai-issue-${{ env.ISSUE_NUMBER }}"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
      
      # Process with AI based on action type
      - name: Process with OpenAI
        id: openai
        run: |
          # This would be your actual OpenAI API integration
          # Here's a simplified mock-up of what this would do
          
          ACTION="${{ env.ACTION_TYPE }}"
          TITLE="${{ env.ISSUE_TITLE }}"
          BODY="${{ env.ISSUE_BODY }}"
          
          # Create a request file for OpenAI API
          cat > request.json << EOL
          {
            "model": "gpt-4o",
            "messages": [
              {
                "role": "system", 
                "content": "You are an AI assistant specialized in analyzing GitHub issues and suggesting code changes. You will provide analysis, suggestions, and code based on the issue details."
              },
              {
                "role": "user",
                "content": "Action: $ACTION\nIssue Title: $TITLE\nIssue Description: $BODY\n\nPlease $ACTION this issue and provide relevant code changes or analysis."
              }
            ],
            "temperature": 0.7
          }
          EOL
          
          # This would be your actual API call - we'll simulate output
          if [ "$ACTION" == "analyze" ]; then
            echo "{\"analysis\": \"Analysis of issue #${{ env.ISSUE_NUMBER }}: $TITLE\", \"suggestions\": [\"Suggestion 1\", \"Suggestion 2\"]}" > ai_response.json
          elif [ "$ACTION" == "suggest-fix" ]; then
            echo "{\"analysis\": \"Issue #${{ env.ISSUE_NUMBER }} appears to be a bug in the application\", \"fix\": \"Proposed fix details\", \"code_changes\": [{\"file\": \"example.py\", \"change\": \"def fixed_function():\n    return 'fixed'\"}]}" > ai_response.json
          elif [ "$ACTION" == "implement" ]; then
            echo "{\"analysis\": \"Implementation plan for feature request #${{ env.ISSUE_NUMBER }}\", \"implementation\": \"Implementation details\", \"code_changes\": [{\"file\": \"new_feature.py\", \"change\": \"def new_feature():\n    return 'implemented'\"}]}" > ai_response.json
          elif [ "$ACTION" == "optimize" ]; then
            echo "{\"analysis\": \"Performance optimization for #${{ env.ISSUE_NUMBER }}\", \"optimization\": \"Optimization strategy\", \"code_changes\": [{\"file\": \"slow_code.py\", \"change\": \"def optimized_function():\n    return 'faster'\"}]}" > ai_response.json
          fi
          
          # In a real implementation, you would parse the actual OpenAI response and create files

          echo "AI_RESPONSE_FILE=ai_response.json" >> $GITHUB_ENV
          
          # Comment the analysis on the issue
          jq -r '.analysis' ai_response.json | gh issue comment ${{ env.ISSUE_NUMBER }} --body-file -
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        continue-on-error: true
      
      # Create a summary file
      - name: Create AI summary
        run: |
          mkdir -p .github/ai-changes
          
          cat > .github/ai-changes/SUMMARY.md << EOL
          # AI-Generated Changes for Issue #${{ env.ISSUE_NUMBER }}
          
          ## Issue Details
          
          **Title:** ${{ env.ISSUE_TITLE }}
          
          ## AI Analysis
          
          $(jq -r '.analysis' ${{ env.AI_RESPONSE_FILE }})
          
          ## Proposed Changes
          
          $(jq -r '.suggestions // .fix // .implementation // .optimization // "No specific changes proposed"' ${{ env.AI_RESPONSE_FILE }})
          
          ## Code Changes
          
          The following files would be modified:
          
          $(jq -r '.code_changes[] | "- `" + .file + "`"' ${{ env.AI_RESPONSE_FILE }} 2>/dev/null || echo "- No code changes specified")
          
          ---
          
          Generated by AI Assistant
          EOL
          
          git add .github/ai-changes/SUMMARY.md
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub AI Assistant"
          git commit -m "docs: Add AI analysis summary for issue #${{ env.ISSUE_NUMBER }}"
      
      # Apply the changes if action type is implement, suggest-fix, or optimize
      - name: Apply AI suggested changes
        if: env.ACTION_TYPE == 'implement' || env.ACTION_TYPE == 'suggest-fix' || env.ACTION_TYPE == 'optimize'
        run: |
          # In a real implementation, you would iterate through the code changes in the AI response
          # and create or modify the actual files
          
          # For demonstration purposes, we'll create a sample file
          mkdir -p samples
          
          cat > samples/ai_change_example.py << EOL
          # This is a sample file created by the AI assistant
          # In a real implementation, this would contain actual code changes

          def example_function():
              """
              Example function demonstrating the changes the AI would make
              for issue #${{ env.ISSUE_NUMBER }}: ${{ env.ISSUE_TITLE }}
              """
              return "AI-suggested implementation"
          EOL
          
          git add samples/
          git commit -m "feat: Apply AI-suggested changes for issue #${{ env.ISSUE_NUMBER }}"
      
      # Push changes to the branch
      - name: Push changes
        run: git push origin ${{ env.BRANCH_NAME }}
      
      # Create pull request
      - name: Create Pull Request
        run: |
          ACTION_NAME="${{ env.ACTION_TYPE }}"
          
          # Capitalize first letter for title
          ACTION_NAME_CAPITALIZED=$(echo "$ACTION_NAME" | sed 's/^\(.\)/\U\1/')
          
          # Create PR with appropriate title and body based on action type
          PR_BODY="This pull request was automatically generated by the AI assistant in response to issue #${{ env.ISSUE_NUMBER }}.

          ## AI $ACTION_NAME_CAPITALIZED
          
          $(jq -r '.analysis' ${{ env.AI_RESPONSE_FILE }})
          
          ## Changes Included
          
          $(jq -r '.suggestions // .fix // .implementation // .optimization // "No specific changes described"' ${{ env.AI_RESPONSE_FILE }})
          
          ## Implementation Details
          
          $(jq -r '.code_changes[] | "- `" + .file + "`: " + (.change | split("\n") | first)' ${{ env.AI_RESPONSE_FILE }} 2>/dev/null || echo "- Implementation details not available")
          
          ---
          
          To provide feedback on these changes, please comment on this PR or the original issue.
          To request further adjustments, add a comment with \`@ai adjust [your instructions]\`.
          
          Closes #${{ env.ISSUE_NUMBER }}"
          
          # Create the PR
          gh pr create --title "[$ACTION_NAME_CAPITALIZED] ${{ env.ISSUE_TITLE }}" \
                      --body "$PR_BODY" \
                      --base main \
                      --head ${{ env.BRANCH_NAME }} \
                      --label "ai-generated"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}